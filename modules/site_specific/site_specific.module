<?php
/*
 * @file .module
 */

/*
 * Implement hook_form_alter
 */
function site_specific_form_alter (&$form, &$form_state, $form_id) {
  if (strpos($form_id, 'search_api_ranges_block_slider_view_form_') === 0) {
    unset($form['text-range']);
    $form['submit']['#attributes']['class'][] = 'element-invisible';
  }

	if ($form_id == 'search_api_ranges_block_slider_view_form_field_total_area') {
		$units = array(
			'm2' => t('M2'),
			'ft2' => t('Ft2'),
		);

		$df = !empty($_GET['unit']) ? $_GET['unit'] : 'm2';

    if ($df == 'ft2') {
      $from = round($form['range-from']['#default_value'] * 10.7639);
      $to = round($form['range-to']['#default_value'] * 10.7639);
      $form['range-from']['#default_value'] = $from;
      $form['range-to']['#default_value'] = $to;

      $form['range-max']['#value'] = round($form['range-max']['#value'] * 10.7639);
      $form['range-min']['#value'] = round($form['range-min']['#value'] * 10.7639);
    }

		$form['unit'] = array(
			'#type' => 'select',
			'#options' => $units,
			'#default_value' => $df,
      '#id' => 'unit-area',
		);

    drupal_add_js(drupal_get_path('module', 'site_specific') . '/js/slider.js');

		$form['#submit'] = array('search_api_ranges_slider_form_field_total_area_submit');
	}

  if ($form_id == 'classified_node_form') {
    //check user allow create node cate Job
    $voca = taxonomy_vocabulary_machine_name_load('product_category');
    $terms = taxonomy_get_tree($voca->vid, 20616, 2);
    $tids = array();
    $tids[] = 20616;
    foreach ($terms as $term) {
      $tids[] = $term->tid;
    }

    global $user;
    $query = db_select('node', 'n');
    $query->join('field_data_field_category', 'c', 'c.entity_id=n.nid');
    $query->fields('n', array('nid'));
    $query->condition('n.type', 'classified')
      ->condition('n.uid', $user->uid)
      ->condition('n.status', 1)
      ->condition('c.field_category_tid', $tids, 'IN');

    $result = $query->execute()->fetchAll();
    if (!empty($result)) {
      $field_category = &$form['field_category'];
      foreach ($tids as $tid) {
        unset($field_category[$field_category['#language']]['#options'][$tid]);
      }
    }
  }
}

function search_api_ranges_slider_form_field_total_area_submit($form, &$form_state) {
	$values = $form_state['values'];
  $range_field = $form_state['input']['range-field'];
  $range_from = $values['range-from'];
  $range_to = $values['range-to'];

  if ($values['unit'] == 'ft2') {
    $range_from = round($range_from / 10.7639);
    $range_to = round($range_to / 10.7639);
  }

  // Prepare params and existing filter $pos (if any)
  $params = drupal_get_query_parameters($_GET, array('q', 'page'));

  // Get pretty path path and goto()
  if (drupal_multilingual() && variable_get('locale_language_negotiation_url_part') == LOCALE_LANGUAGE_NEGOTIATION_URL_PREFIX) {
    list($language, $path) = language_url_split_prefix(request_path(), language_list());
    $language = $language ? $language : NULL;
  }
  else {
    $path = request_path();
    $language = NULL;
  }
  if (module_exists('facetapi_pretty_paths')) {
    $exists = FALSE;
    $split_path = explode('/', $path);
    foreach ($split_path as $key => $value) {
      if (!($key % 2) && $value == $range_field) {
        $exists = $split_path[$key + 1];
      }
    }

    // Decision: replace existing range or add new
    $new_range = '[' . $range_from . ' TO ' . $range_to . ']';
    if ($exists) {
      $path = str_replace($exists, $new_range, $path);
    }
    else {
      $path .= '/' . $range_field . '/' . $new_range;
    }

    // Unset non-pretty query
    unset($params['f']);
  }
  else {
    // Not pretty path logic
    $query = $range_field . ':' . '[' . $range_from . ' TO ' . $range_to . ']';

    $pos = -1;
    if (isset($params['f'])) {
      foreach ($params['f'] as $key => $param) {
        if (strpos($param, $range_field . ':') !== FALSE) {
          $pos = $key;
        }
      }
    }

    if ($pos != -1) {
      $params['f'][$pos] = $query;
    }
    else {
      $params['f'][] = $query;
    }
  }

  $params['unit'] = $form_state['values']['unit'];
  
  $form_state['redirect'] = array($path, array('query' => array($params), 'language' => $language));
}

/*
 * Implement hook_menu_alter(&$items)
 */
function site_specific_menu_alter(&$items) {
  if (isset($items['compare/type'])) {
    $items['compare/type']['page callback'] = 'node_compare_page_clasifika';
  }

  if (isset($items['compare/toggle/%node'])) {
    $items['compare/toggle/%node']['page callback'] = 'node_compare_process_clasifika';
  }

  if (isset($items['user'])) {
    $items['user']['title callback'] = 'slac_user_title_clasifika';
  }
}

function slac_user_title_clasifika() {
  if (user_is_logged_in()) {
    global $user;
    $name = $user->name;

    if ($user->picture) {
      $account = user_load($user->uid);
      $title = theme_image_style(
        array(
          'style_name' => 'thumbnail',
          'path' =>$account->picture->uri,
          'attributes' => array(
            'class' => 'avatar',
          ),
          'width' => NULL,
          'height' => NULL,
          'title' => $name,
        )
      );
    }else {
      $path = variable_get('user_picture_default', FALSE);
      if ($path) {
        global $base_url;
        $img = $base_url.'/'.$path;
        $title = "<img class='avatar' src='$img' title='$name' />";
      }else {
        $title = '';
      }
    }

    return $title . '<span class="user-name">' . t("Hello, $name!") . '</span>';
  }

  return  t('User account');
}

/**
 * Generates a page with a comparative table.
 */
function node_compare_page_clasifika() {
  global $user;
  $nids = func_get_args();
  $type = array_shift($nids);
  $nids_count = count($nids);

  $user_roles = implode('/', array_keys($user->roles));
  $cid = 'node_compare:' . $user_roles . '/' . $type . '/' . implode('/', $nids);

  /*if ($cache = cache_get($cid, 'cache_page')) {
    return $cache->data;
  }*/

  // Checking for limit.
  $check_limit = FALSE;
  $limit = variable_get('node_compare_items_limit', 0);
  if (!$limit || ($nids_count > 0 && $nids_count <= $limit)) {
    $check_limit = TRUE;
  }

  if (isset($type) && $check_limit) {
    $header = array();
    $nodes = node_load_multiple($nids, array(), TRUE);
    foreach ($nodes as $node) {
      if (node_access('view', $node) && $node->type == $type) {
        $link_options = array('attributes' => array(
            'title' => $node->title,
            'class' => array('compare-item'),
          ),
        );
        $header[$node->nid] = array('data' => l($node->title, 'node/' . $node->nid, $link_options), 'class' => 'item-title');
      }
    }

    if (count($header) == $nids_count) {
      $fields = variable_get('node_compare_type_' . $type, array());

      $group_other = $fields;
      if (in_array('field_features', $fields)) {
        $ds_specific = 'field_features';
        $key = array_search($ds_specific, $fields);
        unset($fields[$key]);
      }

      if (module_exists('field_group')) {
        $groups = field_group_info_groups('node', $type, 'form');
        foreach ($groups as $key => $group) {
          foreach ($group->children as $field) {
            if (in_array($field, $group_other)) {
              $key_field = array_search($field, $group_other);
              unset($group_other[$key_field]);
            }
          }
        }
      }

      $groups[] = (object) array(
        'children' => $group_other,
        'label' => t('Other'),
        'weight' => 10000,
      );

      $output = array();
      foreach ($groups as $key => $group) {
        $rows = array();
        foreach ($group->children as $field_name) {
          if (in_array($field_name, $fields)) {
            $field_not_empty = FALSE;
            if ($instance = field_info_instance('node', $field_name, $type)) {
              $weight = $instance['widget']['weight'];
              $display_mode = 'default';

              $display = $instance['display'][$display_mode];
              $display['label'] = 'hidden';

              // Prepare translated options if using the i18n_field module.
              if (module_exists('i18n_field')) {
                $instance['label'] = i18n_field_translate_property($instance, 'label');
              }

              $row = array(array('data' => '<span>'.$instance['label'].'</span>', 'class' => 'compare-field-label'));
              
              $content = array();
              foreach (array_keys($header) as $nid) {
                $field = field_view_field('node', $nodes[$nid], $field_name, $display);
                
                if ($field) {
                  $row[] = array('data' => '<span>'.render($field).'</span>', 'class' => 'content-compare');
                  $field_not_empty = TRUE;
                  $content[strip_tags(render($field))] = 1;
                }
                else {
                  $row[] = array('data' => '<span>'.variable_get('node_compare_empty_field', '&nbsp;').'</span>', 'class' => 'content-compare');
                }
              }

            }

            if ($field_not_empty) {
              if (count($header) == count($content)) {
                foreach ($row as $col => &$cell) {
                  if ($col == 0) continue;
                  $cell['class'] = 'different';
                }
              }

              $rows[$weight] = array('data' => $row, 'class' => array('compare-field-row', $field_name));
            }
          }
        }

        if (!empty($rows)) {
          ksort($rows);
          $group_table = array(
            '#theme' => 'table',
            '#rows' => $rows,
            '#caption' => $group->label,
            '#attributes' => array(
              'class' => array(
                'group-compare'
              ),
            ),
          );

          $output[$group->weight] = drupal_render($group_table);
        }
      }

      if (!empty($ds_specific)) {
        $field = field_info_field($ds_specific);
        
        $sp_rows = array();
        $tmp = array();
        foreach ($field['settings']['allowed_values'] as $key => $value) {
          $sp_rows[$key]['data'][0] = array(
            'data' => '<span>'.t($value).'</span>',
            'class' => 'compare-field-label',
          );

          $sp_rows[$key]['class'] = array('compare-field-row');

          for ($i=1; $i <= count($header); $i++) { 
            $sp_rows[$key]['data'][$i] = array(
              'data' => '<span><div class="field-item">'.t('No').'</div></span>',
              'class' => 'content-compare',
            );
          }
        }
        
        $int = 1;
        $all_empty = TRUE;
        foreach (array_keys($header) as $nid) {
          $items = field_get_items('node', $nodes[$nid], $ds_specific);
          if (!empty($items)) {
            $all_empty = FALSE;
          }else {
            continue;
          }

          foreach ($items as $k => $v) {
            $sp_rows[$v['value']]['data'][$int] = array(
              'data' => '<span><div class="field-item">'.t('Yes').'</div></span>',
              'class' => 'content-compare',
            );

            $sp_rows[$v['value']]['compare'][] = 1;
          }

          $int++;
        }

        if (!$all_empty) {
          foreach ($sp_rows as $key => &$row) {
            if (empty($row['compare'])) continue;
            $cmp = $row['compare'];
            unset($row['compare']);
            if (count($header) != count($cmp)) {
              foreach ($row['data'] as $col => &$cell) {
                if ($col == 0) continue;
                $cell['class'] = 'different';
              }
            }
          }

          $instance = field_info_instance('node', $ds_specific, $type);
          $group_caption = $instance['label'];
          if (module_exists('i18n_field')) {
            $group_caption = i18n_field_translate_property($instance, 'label');
          }

          $group_table = array(
            '#theme' => 'table',
            '#rows' => $sp_rows,
            '#caption' => $group_caption,
            '#attributes' => array(
              'class' => array(
                'group-compare'
              ),
            ),
          );

          $output[10001] = drupal_render($group_table);
        }
      }

      if (!empty($output)) {
        ksort($output);
        $output = implode('', $output);
        $modes = field_view_mode_settings('node', $type);
        $view_mode = 'teaser';

        if (!empty($modes['node_compare']) && !empty($modes['node_compare']['custom_settings'])) {
          $view_mode = 'node_compare';
        }

        $nodes_view = node_view_multiple($nodes, $view_mode);
        $output = '<div class="nodes-view-compare">'.drupal_render($nodes_view).'</div>' . $output;
        return $output;
      }

    }
  }

  return MENU_NOT_FOUND;
}

/**
 * Implements hook_field_extra_fields().
 */
function site_specific_field_extra_fields() {
  foreach (node_type_get_types() as $type) {
    if (variable_get('node_compare_type_' . $type->type, array())) {
      $return['node'][$type->type] = array(
        'display' => array(
          'node_compare_no_js' => array(
            'label' => t('Node Compare link(No js)'),
            'description' => t('Link for add/remove nodes for compares not use js.'),
            'weight' => 10,
          ),
        ),
      );

      return $return;
    }
  }
}

/**
 * Implements hook_node_view().
 */
function site_specific_node_view($node, $view_mode, $langcode) {
  if (user_access('use comparison')) {
    $extra_fields = field_extra_fields_get_display('node', $node->type, $view_mode);

    if (isset($extra_fields['node_compare_no_js']) && $extra_fields['node_compare_no_js']['visible']) {
      $current_path = current_path();
      $nids = empty($_SESSION['node_compare']['nids']) ? array() : $_SESSION['node_compare']['nids'];
      if (substr($current_path, 0, strlen('compare/type')) == 'compare/type') {
        $nodes = node_load_multiple(array_keys($nids), array('type' => $node->type));
        $destination = array();
        if (count($nodes) > 2) {
          $destination = array('destination' => 'compare/me');
        }
      }else {
        $destination = drupal_get_destination();
      }

      if (isset($nids[$node->nid])) {
        $link_text = variable_get('node_compare_text_remove', 'Remove from comparison');
      }else {
        $link_text = variable_get('node_compare_text_add', 'Add to compare');
      }

      $node->content['node_compare_no_js'] = array(
        '#markup' => l(t($link_text), 'compare/toggle/'.$node->nid, array('query' => $destination)),
      );
    }
  }
}

function node_compare_process_clasifika($node, $clear = FALSE, $mode = '') {
  $node_compare_request = &drupal_static('node_compare_request');
  $limit = (int) variable_get('node_compare_items_limit', 0);
  $nids = empty($_SESSION['node_compare']['nids']) ? array() : array_keys($_SESSION['node_compare']['nids']);

  if (is_object($node) && count($nids)) {
    $nid = reset($nids);
    $node_compare = node_load($nid);
    $cp1 = empty($node->field_category[LANGUAGE_NONE][0]['tid']) ? -1 : $node->field_category[LANGUAGE_NONE][0]['tid'];
    $cp2 = empty($node_compare->field_category[LANGUAGE_NONE][0]['tid']) ? 0 : $node_compare->field_category[LANGUAGE_NONE][0]['tid'];
    if ($cp1 != $cp2) {
      node_compare_sess_clear();
    }

    $updated = site_specific_sess_update($node->type, $node->nid, $node->title);
  }else {
    $updated = $clear ? node_compare_sess_clear() : site_specific_sess_update($node->type, $node->nid, $node->title);
  }

  // Checks ajax mode.
  if ($mode == 'ajax') {
    if ($updated) {
      $commands[] = ajax_command_html('#node-compare-items', theme('node_compare_block_content'));
      if ($clear) {
        $commands[] = array(
          'command' => 'node_compare_clear',
          'text' => variable_get('node_compare_text_add', 'Add to compare'),
        );
      }
      else {
        $commands[] = ajax_command_replace('#compare-toggle-' . $node->nid, theme('node_compare_toggle_link', array('nid' => $node->nid)));
      }
    }
    $page = array('#type' => 'ajax', '#commands' => $commands);
    $node_compare_request = TRUE;
    ajax_deliver($page);
  }
  // If JS disabled, then redirect the user back to the page where user came from.
  else {
    drupal_goto();
  }
}

/**
 * Update session when handling the nodes selected for comparison.
 */
function site_specific_sess_update($type, $nid, $title) {
  if (isset($_SESSION['node_compare']) && $_SESSION['node_compare']['type'] == $type) {
    $limit = (int) variable_get('node_compare_items_limit', 0);
    if (isset($_SESSION['node_compare']['nids'][$nid])) {
      unset($_SESSION['node_compare']['nids'][$nid]);
      return TRUE;
    }
    elseif ($limit && (count($_SESSION['node_compare']['nids']) >= $limit)) {
      array_pop($_SESSION['node_compare']['nids']);
      $_SESSION['node_compare']['nids'][$nid] = $title;
      return TRUE;
    }
  }
  else {
    $_SESSION['node_compare']['type'] = $type;
    $_SESSION['node_compare']['nids'] = array();
  }
  $_SESSION['node_compare']['nids'][$nid] = $title;
  return TRUE;
}

/** 
 * Implement hook preprocess_link
 */
function site_specific_preprocess_link(&$vars) {
  if ($vars['path'] == 'favorites') {
    global $user;
    $query = db_select('flagging', 'fg');
    $query->join('flag', 'f', 'f.fid=fg.fid');
    $query->fields('fg', array('flagging_id'));
    $query->condition('f.name', 'favorites');
    $query->condition('fg.uid', $user->uid);
    $result = $query->execute();

    $num_items = $result->rowCount();
    if ($num_items == 0) {
      $vars['options']['attributes']['onclick'] = 'return false;';
      $vars['options']['attributes']['style'] = 'cursor: default;';
      $vars['options']['attributes']['class'][] = 'disabled';
    }
    $vars['options']['attributes']['class'][] = 'favorite';

    $vars['text'] = format_plural($num_items, '1 <b>Favorite</b>', '@count <b>Favorites</b>');
  } 

  if ($vars['path'] == 'compare/me') {
    $num_items = 0;
    if (isset($_SESSION['node_compare']['nids'])) {
      $sess = $_SESSION['node_compare'];
      $num_items = count($sess['nids']);
    }

    if ($num_items < 1) {
      $vars['options']['attributes']['onclick'] = 'return false;';
      $vars['options']['attributes']['style'] = 'cursor: default;';
      $vars['options']['attributes']['class'][] = 'disabled';
    }
    
    if( $num_items >= 2 ) $vars['options']['attributes']['class'] = array('active');
    $vars['text'] = format_plural($num_items, '1 <b>Compare</b>', '@count <b>Compares</b>');
  }
}

/**
 * Implements hook_form_alter().
 */
function site_specific_form_lang_dropdown_form_alter(&$form, &$form_state, $form_id){
  // Language names with only 3 letters
  $aux = '';
  foreach(  $form['lang_dropdown_select']['#options'] as $key=>$opt ){
    $aux .= substr( $opt , 0 , 3 ).' / ';
    $form['lang_dropdown_select']['#options'][$key] = $key.'@'.substr( $opt , 0 , 3 );
  }
}


